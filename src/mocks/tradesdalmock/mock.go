// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gufranmirza/ticker-api/dal/tradesdal (interfaces: TradesDal)

// Package tradesdalmock is a generated GoMock package.
package tradesdalmock

import (
	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/gufranmirza/ticker-api/database/dbmodels"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockTradesDal is a mock of TradesDal interface
type MockTradesDal struct {
	ctrl     *gomock.Controller
	recorder *MockTradesDalMockRecorder
}

// MockTradesDalMockRecorder is the mock recorder for MockTradesDal
type MockTradesDalMockRecorder struct {
	mock *MockTradesDal
}

// NewMockTradesDal creates a new mock instance
func NewMockTradesDal(ctrl *gomock.Controller) *MockTradesDal {
	mock := &MockTradesDal{ctrl: ctrl}
	mock.recorder = &MockTradesDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradesDal) EXPECT() *MockTradesDalMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTradesDal) Create(arg0 string, arg1 *dbmodels.Trades) (*dbmodels.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTradesDalMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTradesDal)(nil).Create), arg0, arg1)
}

// DeleteByTicker mocks base method
func (m *MockTradesDal) DeleteByTicker(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTicker", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTicker indicates an expected call of DeleteByTicker
func (mr *MockTradesDalMockRecorder) DeleteByTicker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTicker", reflect.TypeOf((*MockTradesDal)(nil).DeleteByTicker), arg0)
}

// GetByID mocks base method
func (m *MockTradesDal) GetByID(arg0 primitive.ObjectID) (*dbmodels.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*dbmodels.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockTradesDalMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTradesDal)(nil).GetByID), arg0)
}

// GetByTicker mocks base method
func (m *MockTradesDal) GetByTicker(arg0 string) (*dbmodels.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTicker", arg0)
	ret0, _ := ret[0].(*dbmodels.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTicker indicates an expected call of GetByTicker
func (mr *MockTradesDalMockRecorder) GetByTicker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTicker", reflect.TypeOf((*MockTradesDal)(nil).GetByTicker), arg0)
}

// GetByTickerAndUser mocks base method
func (m *MockTradesDal) GetByTickerAndUser(arg0 string, arg1 primitive.ObjectID) (*dbmodels.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTickerAndUser", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTickerAndUser indicates an expected call of GetByTickerAndUser
func (mr *MockTradesDalMockRecorder) GetByTickerAndUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTickerAndUser", reflect.TypeOf((*MockTradesDal)(nil).GetByTickerAndUser), arg0, arg1)
}

// GetTradesByUserID mocks base method
func (m *MockTradesDal) GetTradesByUserID(arg0 primitive.ObjectID) ([]dbmodels.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradesByUserID", arg0)
	ret0, _ := ret[0].([]dbmodels.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradesByUserID indicates an expected call of GetTradesByUserID
func (mr *MockTradesDalMockRecorder) GetTradesByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradesByUserID", reflect.TypeOf((*MockTradesDal)(nil).GetTradesByUserID), arg0)
}

// Update mocks base method
func (m *MockTradesDal) Update(arg0 *dbmodels.Trades) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTradesDalMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTradesDal)(nil).Update), arg0)
}
