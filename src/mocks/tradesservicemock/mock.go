// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gufranmirza/ticker-api/web/services/v1/tradesservice (interfaces: TradesService)

// Package tradesservicemock is a generated GoMock package.
package tradesservicemock

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockTradesService is a mock of TradesService interface
type MockTradesService struct {
	ctrl     *gomock.Controller
	recorder *MockTradesServiceMockRecorder
}

// MockTradesServiceMockRecorder is the mock recorder for MockTradesService
type MockTradesServiceMockRecorder struct {
	mock *MockTradesService
}

// NewMockTradesService creates a new mock instance
func NewMockTradesService(ctrl *gomock.Controller) *MockTradesService {
	mock := &MockTradesService{ctrl: ctrl}
	mock.recorder = &MockTradesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradesService) EXPECT() *MockTradesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTradesService) Create(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0, arg1)
}

// Create indicates an expected call of Create
func (mr *MockTradesServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTradesService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockTradesService) Delete(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1)
}

// Delete indicates an expected call of Delete
func (mr *MockTradesServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTradesService)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockTradesService) Get(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1)
}

// Get indicates an expected call of Get
func (mr *MockTradesServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTradesService)(nil).Get), arg0, arg1)
}

// Portfolio mocks base method
func (m *MockTradesService) Portfolio(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Portfolio", arg0, arg1)
}

// Portfolio indicates an expected call of Portfolio
func (mr *MockTradesServiceMockRecorder) Portfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Portfolio", reflect.TypeOf((*MockTradesService)(nil).Portfolio), arg0, arg1)
}

// PortfolioReturns mocks base method
func (m *MockTradesService) PortfolioReturns(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PortfolioReturns", arg0, arg1)
}

// PortfolioReturns indicates an expected call of PortfolioReturns
func (mr *MockTradesServiceMockRecorder) PortfolioReturns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortfolioReturns", reflect.TypeOf((*MockTradesService)(nil).PortfolioReturns), arg0, arg1)
}

// Sell mocks base method
func (m *MockTradesService) Sell(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sell", arg0, arg1)
}

// Sell indicates an expected call of Sell
func (mr *MockTradesServiceMockRecorder) Sell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockTradesService)(nil).Sell), arg0, arg1)
}

// Update mocks base method
func (m *MockTradesService) Update(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update
func (mr *MockTradesServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTradesService)(nil).Update), arg0, arg1)
}
